PRAGMA foreign_keys = ON;

CREATE TABLE CATEGORIES (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT UNIQUE NOT NULL,
  description TEXT
);

CREATE TABLE BOOKS (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  title TEXT NOT NULL,
  rare INTEGER DEFAULT 0,
  category_id INTEGER,
  FOREIGN KEY (category_id) REFERENCES CATEGORIES(id) ON DELETE SET NULL
);

CREATE TABLE AUTHORS (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  lastname TEXT NOT NULL,
  firstname TEXT
);

CREATE TABLE BOOKS_AUTHORS (
  book_id INTEGER,
  author_id INTEGER,
  PRIMARY KEY (book_id, author_id),
  FOREIGN KEY (book_id) REFERENCES BOOKS(id) ON DELETE CASCADE,
  FOREIGN KEY (author_id) REFERENCES AUTHORS(id) ON DELETE CASCADE
);

CREATE TABLE MEMBERS (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  lastname TEXT NOT NULL,
  firstname TEXT,
  email TEXT UNIQUE NOT NULL,
  registration_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE COPIES (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  condition TEXT NOT NULL,
  location TEXT NOT NULL,
  acquisition_date DATE NOT NULL,
  book_id INTEGER,
  FOREIGN KEY (book_id) REFERENCES BOOKS(id) ON DELETE CASCADE
);

CREATE TABLE BORROWINGS (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  borrowing_date DATE NOT NULL,
  expected_return_date DATE NOT NULL,
  actual_return_date DATE,
  copy_id INTEGER,
  member_id INTEGER,
  FOREIGN KEY (copy_id) REFERENCES COPIES(id) ON DELETE CASCADE,
  FOREIGN KEY (member_id) REFERENCES MEMBERS(id) ON DELETE CASCADE
);

CREATE INDEX idx_book_title ON BOOKS (title);
CREATE INDEX idx_author_name ON AUTHORS (lastname);
CREATE INDEX idx_member_name ON MEMBERS (lastname);